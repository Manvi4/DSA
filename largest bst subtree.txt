/* Online Java Compiler and Editor */
class TreeNode {
    int data;
    TreeNode left, right;

    TreeNode(int data) {
        this.data = data;
        left = right = null;
    }
}

class BSTInfo {
    boolean isBST;
    int size, min, max;

    BSTInfo(boolean isBST, int size, int min, int max) {
        this.isBST = isBST;
        this.size = size;
        this.min = min;
        this.max = max;
    }
}

public class LargestBSTSubtree {
    static int maxSize = 0;

   
    private static BSTInfo findLargestBST(TreeNode root) {
        if (root == null) return new BSTInfo(true, 0, Integer.MAX_VALUE, Integer.MIN_VALUE);

        BSTInfo left = findLargestBST(root.left);
        BSTInfo right = findLargestBST(root.right);

        // Check if the current subtree is a BST
        if (left.isBST && right.isBST && root.data > left.max && root.data < right.min) {
            //size of leaf node is 1 (plus 1 is for the node itself)
            int size = left.size + right.size + 1;
            maxSize = Math.max(maxSize, size);
            return new BSTInfo(true, size, Math.min(root.data, left.min), Math.max(root.data, right.max));
        }

        return new BSTInfo(false, 0, 0, 0);
    }

    public static int largestBST(TreeNode root) {
        maxSize = 0;
        findLargestBST(root);
        return maxSize;
    }


    public static void main(String[] args) {
        TreeNode root = new TreeNode(10);
        root.left = new TreeNode(5);
        root.right = new TreeNode(15);
        root.left.left = new TreeNode(1);
        root.left.right = new TreeNode(8);
        root.right.right = new TreeNode(7);

        System.out.println("Largest BST Subtree Size: " + largestBST(root));
    }
}
